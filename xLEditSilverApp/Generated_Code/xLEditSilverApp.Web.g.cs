//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Language' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Models")]
    public sealed partial class Language : Entity
    {
        
        private int _id;
        
        private string _text;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Language"/> class.
        /// </summary>
        public Language()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
    
    /// <summary>
    /// The 'Wordtype' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/Models")]
    public sealed partial class Wordtype : Entity
    {
        
        private int _id;
        
        private string _text;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTextChanging(string value);
        partial void OnTextChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Wordtype"/> class.
        /// </summary>
        public Wordtype()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Id' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((this._id != value))
                {
                    this.OnIdChanging(value);
                    this.ValidateProperty("Id", value);
                    this._id = value;
                    this.RaisePropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Text' value.
        /// </summary>
        [DataMember()]
        public string Text
        {
            get
            {
                return this._text;
            }
            set
            {
                if ((this._text != value))
                {
                    this.OnTextChanging(value);
                    this.RaiseDataMemberChanging("Text");
                    this.ValidateProperty("Text", value);
                    this._text = value;
                    this.RaiseDataMemberChanged("Text");
                    this.OnTextChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._id;
        }
    }
}
namespace xLEditSilverApp
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace xLEditSilverApp.Web.ServiceDomain
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using Models;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'LanguageContext' DomainService.
    /// </summary>
    public sealed partial class LanguageContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageContext"/> class.
        /// </summary>
        public LanguageContext() : 
                this(new WebDomainClient<ILanguageContextContract>(new Uri("xLEditSilverApp-Web-ServiceDomain-LanguageContext.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The LanguageContext service URI.</param>
        public LanguageContext(Uri serviceUri) : 
                this(new WebDomainClient<ILanguageContextContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="LanguageContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public LanguageContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Language"/> entity instances that have been loaded into this <see cref="LanguageContext"/> instance.
        /// </summary>
        public EntitySet<Language> Languages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Language>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Language"/> entity instances using the 'GetLanguages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Language"/> entity instances.</returns>
        public EntityQuery<Language> GetLanguagesQuery()
        {
            this.ValidateMethod("GetLanguagesQuery", null);
            return base.CreateQuery<Language>("GetLanguages", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new LanguageContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'LanguageContext' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ILanguageContextContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetLanguages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/LanguageContext/GetLanguagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/LanguageContext/GetLanguages", ReplyAction="http://tempuri.org/LanguageContext/GetLanguagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetLanguages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetLanguages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetLanguages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetLanguages' operation.</returns>
            QueryResult<Language> EndGetLanguages(IAsyncResult result);
        }
        
        internal sealed class LanguageContextEntityContainer : EntityContainer
        {
            
            public LanguageContextEntityContainer()
            {
                this.CreateEntitySet<Language>(EntitySetOperations.None);
            }
        }
    }
    
    /// <summary>
    /// The DomainContext corresponding to the 'WordTypeContext' DomainService.
    /// </summary>
    public sealed partial class WordTypeContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WordTypeContext"/> class.
        /// </summary>
        public WordTypeContext() : 
                this(new WebDomainClient<IWordTypeContextContract>(new Uri("xLEditSilverApp-Web-ServiceDomain-WordTypeContext.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WordTypeContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The WordTypeContext service URI.</param>
        public WordTypeContext(Uri serviceUri) : 
                this(new WebDomainClient<IWordTypeContextContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WordTypeContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public WordTypeContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Wordtype"/> entity instances that have been loaded into this <see cref="WordTypeContext"/> instance.
        /// </summary>
        public EntitySet<Wordtype> Wordtypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Wordtype>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Wordtype"/> entity instances using the 'GetWordtypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Wordtype"/> entity instances.</returns>
        public EntityQuery<Wordtype> GetWordtypesQuery()
        {
            this.ValidateMethod("GetWordtypesQuery", null);
            return base.CreateQuery<Wordtype>("GetWordtypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new WordTypeContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'WordTypeContext' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IWordTypeContextContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetWordtypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/WordTypeContext/GetWordtypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/WordTypeContext/GetWordtypes", ReplyAction="http://tempuri.org/WordTypeContext/GetWordtypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetWordtypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWordtypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWordtypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWordtypes' operation.</returns>
            QueryResult<Wordtype> EndGetWordtypes(IAsyncResult result);
        }
        
        internal sealed class WordTypeContextEntityContainer : EntityContainer
        {
            
            public WordTypeContextEntityContainer()
            {
                this.CreateEntitySet<Wordtype>(EntitySetOperations.None);
            }
        }
    }
}
